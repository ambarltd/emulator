name: Build and Test
on:
  push:
    paths-ignore:
      - '**.md'

# only one build per branch
concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true


jobs:
  build:
    name: GHC ${{ matrix.ghc }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        ghc: ['9.10.1']
        cabal: ['3.10.3.0']
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies - Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install libpcre3-dev
          sudo apt-get install libmysqlclient-dev
          sudo apt-get install libmysqlclient21
          sudo ln -s /opt/hostedtoolcache/mysql/9.0.1/x64/lib/libmysqlclient.so.24 /usr/lib/libmysqlclient.so.24

#     - name: Install MSYS for Windors
#       if: runner.os == 'Windows'
#       uses: msys2/setup-msys2@v2

      - name: Install system dependencies - MacOS
        if: runner.os == 'macOS'
        run: |
          set -x
          brew install pcre2
          brew install pcre
          brew install mysql-connector-c

      - name: Setup - PostgreSQL
        id: postgres-setup
        uses: ikalnytskyi/action-setup-postgres@v7
        with:
          postgres-version: "16"
          database: 'postgres'
          username: 'postgres'
          password: ${{ env.PGPASSWORD }}

      - name: Setup - MySQL
        id: mysql-setup
        uses: shogo82148/actions-setup-mysql@v1
        with:
          mysql-version: "9.0.1"

      - name: Setup - GHC ${{ matrix.ghc }}
        uses: haskell-actions/setup@v2
        id: setup
        with:
          ghc-version: ${{ matrix.ghc }}
          # Defaults, added for clarity:
          cabal-version: ${{ matrix.cabal }}
          cabal-update: true

            # - name: Setup Haskell
            #   if: runner.os == 'Windows'
            #   run: |
            #     ghcup install ghc --set ${{ matrix.ghc }}
            #     ghcup install cabal --set ${{ matrix.cabal }}

            #     ghc --version
            #     cabal --version
            #     cabal update

      - name: Install system dependencies - Windows
        if: runner.os == 'Windows'
        run: |
          # ghcup should be installed on current GHA Windows runners. Let's use ghcup to run
          # pacman, to install the necessary dependencies, ...
          ghcup run --mingw-path -- pacman --noconfirm -S `
            mingw-w64-x86_64-pkg-config `
            mingw-w64-x86_64-pcre `
            mingw-w64-x86_64-libsodium `
            base-devel `
            autoconf-wrapper `
            autoconf `
            automake `
            libtool `
            make
          $ghcMingwDir = Join-Path -Path $(ghc --print-libdir) `
                                 -ChildPath ../mingw/x86_64-*-mingw32/lib/ `
                                 -Resolve
          cabal user-config -a "extra-prog-path: C:/msys64/mingw64/bin, C:/msys64/usr/bin" `
                          -a "extra-include-dirs: C:/msys64/mingw64/include" `
                          -a ("extra-lib-dirs: {0}, C:/msys64/mingw64/lib" -f $ghcMingwDir) `
                          -f init


      - name: Build - Configure
        run: |
          cabal configure --enable-tests --enable-benchmarks --disable-documentation
          cabal build all --dry-run
        # The last step generates dist-newstyle/cache/plan.json for the cache key.

      - name: Build - Restore cached dependencies
        uses: actions/cache/restore@v4
        id: cache
        env:
          key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.key }}-

      - name: Build failing deps
        # If we had an exact cache hit, the dependencies will be up to date.
        if: steps.cache.outputs.cache-hit != 'true' && runner.os == 'macOS'
        run: |
          set -x
          export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/homebrew/include"
          export LD_LIBRARY="$LD_LIBRARY:/opt/homebrew/include"

          MYSQL_LIB=$(dirname $(dirname $LIBMYSQL_PLUGIN_DIR))
          ls -la $MYSQL_LIB
          sudo ln -s $MYSQL_LIB/libmysqlclient.so.24 /usr/lib/libmysqlclient.so.24

          MYSQL_LIB=$(dirname $(dirname $LIBMYSQL_PLUGIN_DIR))
          cat <<EOF >cabal.project.local
          ignore-project: False
          package pcre-light
            extra-include-dirs: /opt/homebrew/include
            extra-lib-dirs: /opt/homebrew/lib
            extra-prog-path: /opt/homebrew/lib
          package mysql
            extra-include-dirs: $MYSQL_LIB/include
            extra-lib-dirs: $MYSQL_LIB/lib
            extra-prog-path: $MYSQL_LIB/lib
          EOF

          cabal build pcre-light
          cabal build mysql

      - name: Build - Install dependencies
        # If we had an exact cache hit, the dependencies will be up to date.
        if: steps.cache.outputs.cache-hit != 'true'
        run: cabal build all --only-dependencies --extra-include-dirs=/opt/homebrew/include

      # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
      - name: Build - Save dependencies to cache
        uses: actions/cache/save@v4
        # If we had an exact cache hit, trying to save the cache would error because of key clash.
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

      - name: Build
        run: cabal build all --extra-include-dirs=/opt/homebrew/include

      - name: Test
        env:
          PGSERVICE: ${{ steps.postgres-setup.outputs.service-name }}
          MYSQL_STUFF: ${{ steps.mysql.outputs.base-dir }}
        run: |
          set -x
          export MYSQL_UNIX_PORT=$(dirname $MYSQL_HOME)/tmp/mysql.sock
          cabal run emulator-tests

      # We run this only when a PR is merged so we can see how things are performing
      # on the GH actions machines.
      - name: Benchmark
        if: github.ref == 'refs/heads/main'
        run: cabal run emulator-tests
